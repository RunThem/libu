#include "u.h"

#define __list_header                                                                              \
  (sizeof(struct {                                                                                 \
    size_t len;                                                                                    \
    void* head; /* head */                                                                         \
    void* tail; /* tail */                                                                         \
  }))

#define __list_init(list) ({ _(list) = u_talloc(__list_header, typeof(_(list))); })

#define __list_clear(list)                                                                         \
  ({                                                                                               \
    list_T(list)* _l_clear__node = _(list)->head;                                                  \
    while (_(list)->head != _(list)->tail) {                                                       \
      _(list)->head = _l_clear__node->next;                                                        \
      u_free(_l_clear__node);                                                                      \
      _l_clear__node = _(list)->head;                                                              \
    }                                                                                              \
    u_free(_l_clear__node);                                                                        \
    _(list)->head = _(list)->tail = nullptr;                                                       \
    _(list)->len                  = 0;                                                             \
  })

#define __list_cleanup(list)                                                                       \
  ({                                                                                               \
    list_clear(list);                                                                              \
    u_free(_(list));                                                                               \
    _(list) = nullptr;                                                                             \
  })

#define __list_push_b(list, _val)                                                                  \
  ({                                                                                               \
    list_T(list)* _l_push_b__node = nullptr;                                                       \
    list_T(list)* _l_push_b__tail = _(list)->tail;                                                 \
                                                                                                   \
    if (_l_push_b__tail == nullptr) {                                                              \
      _l_push_b__node = list_node(list, _val, nullptr, nullptr);                                   \
      _(list)->head = _(list)->tail = _l_push_b__node;                                             \
    } else {                                                                                       \
      _l_push_b__node       = list_node(list, _val, _(list)->tail, nullptr);                       \
      _l_push_b__tail->next = _l_push_b__node;                                                     \
      _(list)->tail         = _l_push_b__node;                                                     \
    }                                                                                              \
                                                                                                   \
    _(list)->len++;                                                                                \
  })

#define __list_push_f(list, _val)                                                                  \
  ({                                                                                               \
    list_T(list)* _l_push_f__node = nullptr;                                                       \
    list_T(list)* _l_push_f__head = _(list)->head;                                                 \
                                                                                                   \
    if (_l_push_f__head == nullptr) {                                                              \
      _l_push_f__node = list_node(list, _val, nullptr, nullptr);                                   \
      _(list)->head = _(list)->tail = _l_push_f__node;                                             \
    } else {                                                                                       \
      _l_push_f__node       = list_node(list, _val, nullptr, _(list)->head);                       \
      _l_push_f__head->prev = _l_push_f__node;                                                     \
      _(list)->head         = _l_push_f__node;                                                     \
    }                                                                                              \
                                                                                                   \
    _(list)->len++;                                                                                \
  })

#define __list_pop_b(list)                                                                         \
  ({                                                                                               \
    list_T(list)* _l_pop_b__node = _(list)->tail;                                                  \
    list_T(list)* _l_pop_b__prev = nullptr;                                                        \
                                                                                                   \
    if (_l_pop_b__node == _(list)->head) {                                                         \
      if (_l_pop_b__node != nullptr) {                                                             \
        _(list)->head = _(list)->tail = nullptr;                                                   \
        _(list)->len--;                                                                            \
      }                                                                                            \
    } else {                                                                                       \
      _l_pop_b__prev       = _l_pop_b__node->prev;                                                 \
      _l_pop_b__prev->next = nullptr;                                                              \
      _(list)->tail        = _l_pop_b__prev;                                                       \
      _(list)->len--;                                                                              \
    }                                                                                              \
                                                                                                   \
    _l_pop_b__node;                                                                                \
  })

#define __list_pop_f(list)                                                                         \
  ({                                                                                               \
    list_T(list)* _l_pop_f__node = _(list)->head;                                                  \
    list_T(list)* _l_pop_f__next = nullptr;                                                        \
                                                                                                   \
    if (_l_pop_f__node == _(list)->tail) {                                                         \
      if (_l_pop_f__node != nullptr) {                                                             \
        _(list)->head = _(list)->tail = nullptr;                                                   \
        _(list)->len--;                                                                            \
      }                                                                                            \
    } else {                                                                                       \
      _l_pop_f__next       = _l_pop_f__node->next;                                                 \
      _l_pop_f__next->prev = nullptr;                                                              \
      _(list)->head        = _l_pop_f__next;                                                       \
      _(list)->len--;                                                                              \
    }                                                                                              \
                                                                                                   \
    _l_pop_f__node;                                                                                \
  })

#define __list_peek_b(list)                                                                        \
  ({                                                                                               \
    list_T(list)* _l_peek_b__node = _(list)->tail;                                                 \
    _l_peek_b__node;                                                                               \
  })

#define __list_peek_f(list)                                                                        \
  ({                                                                                               \
    list_T(list)* _l_peek_f__node = _(list)->head;                                                 \
    _l_peek_f__node;                                                                               \
  })
